Microservice Important Questions:
1.	What the characteristic or features of microservices?
Here, we need to count the advantage and disadvantage of microservices. 

2.	What the best practices for designing microservices?
Below are some important best practices for developing a microservice:
a.	Separate data store for each microservice.
b.	Deploy into containers. I guess increases the utilization of the host with proper isolation to each service. 
c.	Must keep each service stateless. 
d.	ELK implementation
Can do more research on this. 

3.	Difference between SOA and Microservice?
Software oriented architecture says share as much as possible while microservice says share as less as possible. Another significant difference is of size. Microservices are generally a smaller unit doing a function while SOA can be complete monolithic application having potential to decompose or may have many microservices. 

4.	 What is Domain Driven Design?
Domain driven deign focuses of core business functionalities and works in the enforcement of software architecture in sync with business functionalities. With respect to microservices, we can generally tend to have different business requirement implemented in the form of different microservices. 
However, DDD is good to implement when business domain complexity is very high. Also, its not good to apply it when we have substantial technical complexity while minimal domain complexity. Lastly, It is quite to get incorrectly implemented. 

5.	What is Ubiquitous language?
It is languages that defines something demain specific. UL though target the bounded context (specific microservice) because the a specific term of UL may have different meaning in different bounded context. 

6.	What is Cohesion and Coupling with respect to microservice architecture?
The degree to which the element inside the module belong together is said to be cohesion. Thus, high cohesion mean less communication need to other services which is ideal. Thus high cohesion is important in microservice. We can usually measure cohesion as the number of service needs to be changed when a new feature is getting added. 
On the other hand, coupling the dependency between different services in microservice world. Thus, less coupling is ideal. 

7.	What is Rest and its use in microservice world?
REST is Representation State Transfer Protocol used to create web services. In microservices, we can create each service as REST based or non REST based. However, it is generally considered better using REST based. 

8.	What is actuator in spring boot?
Actuator provides the feature of accessing current state of running web service in production environment. We get an extra URI through which we can see the actuator data.
Check more later for better understanding.

9.	What is spring cloud and what problems it resolves?
As of now I know that spring cloud provides tools which are commonly implemented patterns in distributed application like configuration management, discovery server etc. 
Can check more on this.

10.	What are different types to test a microservice?
Well, to the simplest, I would up all the dependent services first to test the target service. Although, it is considered difficult to test microservices. 
If get time then check below:
While working with microservices, testing becomes quite complex as there are multiple microservices working together. So, tests are divided into different levels.
•	At the bottom level, we have technology-facing tests like- unit tests and performance tests. These are completely automated.
•	At the middle level, we have tests for exploratory testing like the stress tests and usability tests.
•	At the top level, we have acceptance tests that are few in number. These acceptance tests help stakeholders in understanding and verifying software features.

11.	
Source 1: https://www.edureka.co/blog/interview-questions/microservices-interview-questions/
@@@Q24. What do you understand by Distributed Transaction?
Distributed Transaction is any situation where a single event results in the mutation of two or more separate sources of data which cannot be committed atomically. In the world of microservices, it becomes even more complex as each service is a unit of work and most of the time multiple services have to work together to make a business successful.
Q25. What is an Idempotence and where it is used?
Idempotence is the property of being able to do something twice in such a way that the end result will remain the same i.e. as if it had been done once only.
Usage: Idempotence is used at the remote service, or data source so that, when it receives the instruction more than once, it only processes the instruction once.
Q26. What is Bounded Context?
Bounded Context is a central pattern in Domain-Driven Design. It is the focus of DDD’s strategic design section which is all about dealing with large models and teams. DDD deals with large models by dividing them into different Bounded Contexts and being explicit about their inter-relationships.
Q27. What is Two Factor Authentication?
Two-factor authentication enables the second level of authentication to an account log-in process.
 
Fig11: Representation of Two Factor Authentication – Microservices Interview Questions 
So suppose a user has to enter only username and password, then that’s considered a single-factor authentication.
Q28. What are the types of credentials of Two Factor Authentication?
The three types of credentials are:
 
Fig 12: Types of Credentials of Two Factor Authentication – Microservices Interview Questions 
Q29. What are Client certificates?
A type of digital certificate that is used by client systems to make authenticated requests to a remote server is known as the client certificate. Client certificates play a very important role in many mutual authentication designs, providing strong assurances of a requester’s identity.
@@@Q30. What is the use of PACT in Microservices architecture?
PACT is an open source tool to allow testing interactions between service providers and consumers in isolation against the contract made so that the reliability of Microservices integration increases.
Usage in Microservices:
•	Used to implement Consumer Driven Contract in Microservices.
•	Tests the consumer-driven contracts between consumer and provider of a Microservice.
Q31. What is OAuth?
OAuth stands for open authorization protocol. This allows accessing the resources of the resource owner by enabling the client applications on HTTP services such as third-party providers Facebook, GitHub, etc. So with this, you can share resources stored on one site with another site without using their credentials.
Q32. What is Conway’s law?
“Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.” – Mel Conway
 
Fig 13: Representation of Conway’s Law – Microservices Interview Questions 
This law basically tries to convey the fact that, in order for a software module to function, the complete team should communicate well. Therefore the structure of a system reflects the social boundaries of the organization(s) that produced it.
@@@Q33. What do you understand by Contract Testing?
According to Martin Flower, contract test is a test at the boundary of an external service which verifies that it meets the contract expected by a consuming service.
Also, contract testing does not test the behavior of the service in depth. Rather, it tests that the inputs & outputs of service calls contain required attributes and the response latency, throughput is within allowed limits.
@@@Q34. What is End to End Microservices Testing?
End-to-end testing validates each and every process in the workflow is functioning properly. This ensures that the system works together as a whole and satisfies all requirements.
In layman terms, you can say that end to end testing is a kind of tests where everything is tested after a particular period.
 
Fig 14: Hierarchy of Tests – Microservices Interview Questions 
Q35. What is the use of Container in Microservices?
Containers are a good way to manage microservice based application to develop and deploy them individually. You can encapsulate your microservice in a container image along with its dependencies, which then can be used to roll on-demand instances of microservice without any additional efforts required.
 
Fig 15: Representation of Containers and How they are used in Microservices – Microservices Interview Questions 
Q36. What is DRY in Microservices architecture?
DRY stands for Don’t Repeat Yourself. It basically promotes the concept of reusing the code. This results in developing and sharing the libraries which in turn result in tight coupling.
@@@Q37. What is a Consumer-Driven Contract (CDC)?
This is basically a pattern for developing Microservices so that they can be used by external systems. When we work on microservices, there is a particular provider who builds it and there are one or more consumers who use Microservice.
Generally, providers specify the interfaces in an XML document. But in Consumer Driven Contract, each consumer of service conveys the interface expected from the Provider.

Microservices Architecture TrainingWatch The Course Preview

Q38. What is the role of Web, RESTful APIs in Microservices?
A microservice architecture is based on a concept wherein all its services should be able to interact with each other to build a business functionality. So, to achieve this, each microservice must have an interface. This makes the web API a very important enabler of microservices. Being based on the open networking principles of the Web, RESTful APIs provide the most logical model for building interfaces between the various components of a microservice architecture.
Q39. What do you understand by Semantic monitoring in Microservices architecture?
Semantic monitoring, also known as synthetic monitoring combines automated tests with monitoring the application in order to detect business failing factors.
Q40. How can we perform Cross-Functional testing?
Cross-functional testing is a verification of non-functional requirements, i.e. those requirements which cannot be implemented like a normal feature.
Q41. How can we eradicate non-determinism in tests?
Non-Deterministic Tests (NDT)  are basically unreliable tests.  So, sometimes it may happen that they pass and obviously sometimes they may also fail. As and when they fail, they are made to re-run to pass.
Some ways to remove non-determinism from tests are as follows:
1.	Quarantine
2.	Asynchronous
3.	Remote Services
4.	Isolation
5.	Time
6.	Resource leaks
Q42. What is the difference between Mock or Stub?
Stub
•	A dummy object that helps in running the test.
•	Provides fixed behavior under certain conditions which can be hard-coded.
•	Any other behavior of the stub is never tested.
For example, for an empty stack, you can create a stub that just returns true for empty() method. So, this does not care whether there is an element in the stack or not.
Mock
•	A dummy object in which certain properties are set initially.
•	The behavior of this object depends on the set properties.
•	The object’s behavior can also be tested.
For example, for a Customer object, you can mock it by setting name and age. You can set age as 12 and then test for isAdult() method that will return true for age greater than 18. So, your Mock Customer object works for the specified condition.
@@@Q43. What do you know about Mike Cohn’s Test Pyramid?
Mike Cohn provided a model called Test Pyramid. This describes the kind of automated tests required for software development.
 
Fig 16: Mike Cohn’s Test Pyramid – Microservices Interview Questions
As per pyramid, the number of tests at first layer should be highest. At service layer, the number of tests should be less than at the unit test level, but more than at the end-to-end level.
Q44. What is the purpose of Docker?
Docker provides a container environment that can be used to host any application. In this, the software application and the dependencies which support it are tightly-packaged together.
So, this packaged product is called a Container and since it is done by Docker, it is called Docker container!

Microservices Architecture TrainingWatch The Course Preview

Q45. What is Canary Releasing?
Canary Releasing is a technique to reduce the risk of introducing a new software version in production. This is done by slowly rolling out the change to a small subset of users before giving it out to the entire infrastructure, i.e. making it available to everybody.
Q46. What do you mean by Continuous Integration (CI)?
Continuous Integration (CI) is the process of automating the build and testing of code every time a team member commits changes to version control. This encourages developers to share code and unit tests by merging the changes into a shared version control repository after every small task completion.
Q47. What is Continuous Monitoring?
Continuous monitoring gets into the depth of monitoring coverage, from in-browser front-end performance metrics, through application performance, and down to host virtualized infrastructure metrics.
Q48. What is the role of an architect in Microservices architecture?
An architect in microservices architecture plays the following roles:
•	Decides broad strokes about the layout of the overall software system.
•	Helps in deciding the zoning of the components. So, they make sure components are mutually cohesive, but not tightly coupled.
•	Code with developers and learn the challenges faced in day-to-day life.
•	Make recommendations for certain tools and technologies to the team developing microservices.
•	Provide technical governance so that the teams in their technical development follow principles of Microservice.
Q49. Can we create State Machines out of Microservices?
As we know that each Microservice owning its own database is an independently deployable program unit, this, in turn, lets us create a State Machine out of it. So, we can specify different states and events for a particular microservice.
For Example, we can define an Order microservice. An Order can have different states. The transitions of Order states can be independent events in the Order microservice.
Q50. What are Reactive Extensions in Microservices?
Reactive Extensions also are known as Rx. It is a design approach in which we collect results by calling multiple services and then compile a combined response. These calls can be synchronous or asynchronous, blocking or non-blocking. Rx is a very popular tool in distributed systems which works opposite to legacy flows.
Hope these Microservices Interview Questions would help you in your Microservices Architect Interviews.
If you wish to learn Microservices and build your own applications, then check out our Microservices Architecture Training which comes with instructor-led live training and real-life project experience. This training will help you understand Microservices in depth and help you achieve mastery over the subject.
About Author
 
Sahiti Kappagantula
Published on Jan 02,2019

Share on 



Source 2: https://career.guru99.com/microservices-interview-questions-and-answer/


Top 25 Microservices Interview Questions and Answers 
1) Explain microservices architecture
Microservice Architecture is an architectural development style which builds an application as a collection of small autonomous services developed for a business domain.
2) Name three commonly used tools for Microservices
•	Wiremock, 2.) Docker and 3.) Hysrix are important Microservices tool.
3) What is Monolithic Architecture?
Monolithic architecture is like a big container in which all the software components of an application are clubbed inside a single package.
4) What are the advantages of microservices?
Here, are some significant advantages of using Microservices:
•	Technology diversity, e., Microservices can mix easily with other frameworks, libraries,  and databases
•	Fault isolation, e., a process failure should not bring the whole system down.
•	Greater support for smaller and parallel team
•	Independent deployment
•	Deployment time reduce
5) What is Spring Cloud?
Spring cloud is an Integration software that integrates with external systems. It allows microservices framework to build applications which perform restricted amounts of data processing. 
@@@6) Discuss uses of reports and dashboards in the environment of Microservices
Reports and dashboards help in monitoring and upkeep of Microservices. Tons of Application Monitoring Tools assist in this.
7) What are main differences between Microservices and Monolithic Architecture?
Microservices	Monolithic Architecture
Service Startup is fast	Service startup takes time
Microservices are loosely coupled architecture.	Monolithic architecture is mostly tightly coupled.
Changes done in a single data model does not affect other Microservices.	Any changes in the data model affect the entire database
Microservices  focuses  on products, not projects	Monolithic put emphasize over the whole project
8) What are the challenges faced while using Microservices?
•	Microservices always rely on each other. Therefore, they need to communicate with each other.
•	As it is distributed system, it is a heavily involved model.
•	If you are using Microservice architecture, you need to ready for operations overhead.
•	You need skilled professionals to support heterogeneously distributed microservices.
9) In which cases microservice architecture best suited?
Microservice architecture is best suited for desktop, web, mobile devices, Smart TVs, Wearable, etc.
10) Tell me the name of some famous companies which are using Microservice architecture
Most large-scale websites like Twitter, Netflix, Amazon, have advanced from a monolithic architecture to a microservices architecture.
11) What are the characteristics of Microservices?
•	Essential messaging frameworks
•	Decentralized Governance
•	Easy Infrastructure automation
•	Design for failure
•	Infrastructure automation
12) What is RESTful?
Representational State Transfer (REST)/RESTful web services is an architectural style that helps computer systems to communicate over the internet. These web services make microservices easier to understand and implement.
@@@13) Explain three types of Tests for Microservices?
In Microservice architecture tests are divided into three broad categories:
•	At the bottom level test, we can perform a general test like performance and unit tests. These kinds of tests are entirely automated.
•	At the middle level, we can perform exploratory tests like the stress tests and usability tests.
•	At the top level, we can conduct acceptance tests which are mostly fewer in numbers. It also helps stakeholders to know about different software features.
14) What are Client certificates?
Client certificates is a digital certificate used to make authenticated requests to a remote server. It is termed as a client certificate.
15) Explain the use of PACT in Microservices architecture?
It is an open source tool which allows testing interactions between service providers and consumers. However, it is separated from the contract made. This increases the reliability of the Microservices applications.
16) What is the meaning of OAuth?
OAuth means open authorization protocol. This protocol allows you to access the client applications on HTTP for third-party providers GitHub, Facebook, etc. It helps you to share resources stored on one site with another site without the need for their credentials.
17) What is End to End Microservices Testing?
End-to-end testing validates every process in the workflow is functioning correctly. It also ensures that the system works together as a whole and satisfies all requirements.
18) Why are Container used in Microservices?
Containers are easiest and effective method to manage the microservice based application. It also helps you to develop and deploy individually. Docker also allows you to encapsulate your microservice in a container image along with its dependencies. Microservice can use these elements without additional efforts.
19) What is the meaning of Semantic monitoring in Microservices architecture?
Semantic monitoring combines automated tests with monitoring of the application. It allows you to find out reasons why your business is not getting more profits.
20) What is a CDC?
CDC is Consumer-Driven Contract. It is a pattern for developing Microservices so that external systems can use them.
21) What is the use of Docker?
Docker offers a container environment which can be used to host any application. This software application and the dependencies that support it which are tightly-packaged together.
@@@22) What are Reactive Extensions in Microservices?
Reactive Extensions is also called Rx. It is a design pattern which allows collecting results by calling multiple services and then compile a combined response. Rx is a popular tool in distributed systems which works exactly opposite to legacy flows.
@@@23) Explain the term ‘Continuous Monitoring.’
Continuous monitoring is a method which is used for searching compliance and risk issues associated with a company’s operational and financial environment. It contains human, processes, and working systems which support efficient and actual operations.
24) How independent micro-services communicate with each other?
It depends upon your project needs. However, in most cases, developers use HTTP/REST with JSON or Binary protocol. However, they can use any communication protocol.
  Download PDF
  
You Might Like:
 Top 40 Cloud Computing Interview Questions & Answers  Top 70 CCNA Interview Questions & Answers  Top 50 Servlet Interview Questions & Answers  Top 50 Asp.Net Web API Interview Questions and Answers
0REPLIES
Leave a Comment
 
Name * 
Email * 
 


Source 3: https://mindmajix.com/microservices-interview-questions

Q1) What is Spring Cloud in the realm of Microservices?
It is that kind of a feature in the realm of Microservices which would provide integration with the outside systems. It is also known as a short-lived Microservices framework that has the ability to build applications in a quick fashion. Moreover, it plays an important function in Microservices as it is associated with finite amounts of processing of data.
Q2) Shed light on the architecture of Microservices
It is that kind of an architecture that facilitates the avoidance of huge application implementation for a large system. It is associated with the providence of loose coupling that takes place between various collaborating procedures. On the other side, it has the ability to run in an independent manner under various types of situations.
Q3) Describe the way in which you can set up service discovery
Although a large number of ways are there in setting up service discovery, you have to use Eureka created by Netflix. This is usually a very hassle-free process that is not heavy on the application. Also, it can suit a variety of applications which is quite good.
Q4) What do you mean by Eureka in the realm of Microservices?
Eureka is also known as the Netflix Service Discovery Server. This uses Spring Cloud and is most often known as the most used setup to start service discovery. It is also not that heavy on the application development process. This is the reason that it is quite popular among the developers of today.
@@@Q5) Shed light on the ways by which you can access a RESTful Microservices
These are the following ways with the help of which you can use a RESTful Microservice.
•	With the use of the load balanced rest template
•	With the use of multiple Microservices, you can easily use a RESTful template
•	If you have been given a large number of RESTful templates, then always make sure that you use the right one

@@@Q6) Describe the process by which you can balance the server-side load by utilizing Spring Cloud
It is interesting to note that the balancing act in case of achieving server-side load can be achieved by the utilization of Netflix Zuul. The Zuul is also known as a JVM based router. It is also regarded as a load balancer by Netflix. This is the reason that it always facilitates a single entity to the system.

Q7) Can you integrate Zuul with other types of projects?
Yes, Zuul can be integrated with other types of Netflix services that are known as Hystrix. It is especially meant for tolerance of various types of faults that are commonly present in Eureka. By tolerating various kinds of faults, service discovery can be made easier within the realm of Microservices. One can also use it to manage routing tables and effective balancing of the load across the system.
Q8) Shed light on the basic need of Microservices in today’s context of application development
Microservices are also known as a new pattern in the realm of software development. It has assumed importance owing to the fact that it has the ability to increase speed and efficiency. It can also manage software solutions in an effective manner. Some also call it as an approach to process and culture which delivers business value in an increased manner. In today’s context of application development, it plays a very crucial role as it can be deployed in the development process of a monolithic application in an efficient manner.
Q9) Describe the circumstances under which you would use the Netflix Hystrix
It is a commonly accepted fact that Hystrix is also known as an error tolerance and latency library. The main purpose of Hystrix is to make sure that it isolates the access points. On the other hand, with the help of these access points, the remote systems can be easily reached. It also makes sure that it restricts the widespread use of 3rd party libraries as well as services. In this manner, it ensures that an application runs in an efficient manner. It is also quite effective in prohibiting the failure that frequently takes place in distributed systems that are quite complex in nature.
@@@Q10) Define the process by which you can easily deploy Spring Batch Tasks with reference to Microservices
The task related to Spring Batch is also known as a simple interface that has just one method to execute. With the help of this feature, you can easily perform singular tasks that relate to deleting and file queries. An example of Spring Batch in the Microservices segment can be in the form of Hello World.
Q11) Shed light on Tasklet with reference to Spring Batch and Microservices
It is important to note that Spring Batch easily provides a Tasklet interface with the help of which the application can perform a single task. It can also clean and delete the various types of resources that are needed before the final execution step.
Q12) Define the Spring Batch Framework with respect to Microservices
It is a batch framework that is quite comprehensive and is light in weight on the application. Its lightweight nature is a great source of positivity in the realm of Microservices. This is so because it is designed in such a manner that it can facilitate the development of robust batch applications. It is that kind of a feature in the realm of Microservices that can easily build upon productivity. It is especially used in the development of enterprise applications that are necessary to make sure that the applications developed are able to meet the set standards of a particular organization.
@@@Q13) Shed light on the way by which you can disable the endpoint of Actuator in the realm of Spring Boot     
At the time of answering this question, you should be well aware of the fact that all the insightful HTTP endpoints are protected. Hence, the developer with the role of an actuator can only access them. On the other hand, to make this answer more credible, you should also add that security can be enforced by the utilization of a user-specific request. This request can be made to the batch frameworks also so that the application runs in a smooth manner.
Q14) What do you know about YAML in the realm of Microservices?
You should always note that YAML is also known as an individual legible language. Many experts also call it a language that can result in the sterilization of data. Hence, basically, it denotes that it can be used to cleanse data. This has a great advantage on the Microservices network. As compared to the other files of various properties, the YAML file is said to be more organized in manner. On the other hand, it is also less confusing and hence it provides easy accessibility to a variety of web developers. However, it is also vital to note that YAML possesses the hierarchical form of data that has played an essential role in the swift development of various applications.
Q15) Shed light on the various aspects of using Spring Profiles
In the context of Microservices, the Spring Profiles play an essential role. It is so because it allows the users in the process of registering various beans. However, the registration process of beans is always dependent on various ways by which the application has been executed. Hence, if you are running the application in the DEVELOPMENT mode, you would witness that a certain number of items can be encumbered in an easy manner. On the other hand, during the time of production, the other items can also be loaded. With the widespread use of Spring Boot, it has become relatively quite easy to make sure that all the profiles can be easily booted. This makes sure that the developed application is running free of errors and is light on the interface.
@@@Q16) Define caching with respect to the environment in which Microservices operate
 It is a commonly observed fact that the cache is that kind of an area in the local memory that has the ability to hold the copy of frequently researched data. In other words, if you have cache accumulated in the application, the application speeds up in a phenomenal manner. On the other side, you can also use the cast function to control the amount of cache you want.
@@@Q17) Do you frequently use the framework related to integration with that of the Spring Boot?
While answering this question, you can always say that you have used Apache Camel and have experience in integrating with the Spring Boot function. You can also say that you have used the Apache Camel Boot starter in the environment of Microservices.
Q18) Shed light on AOP and also describe the way in which you can use it with Microservices
At the time of answering this question, you should always focus on the concerns of cross-cutting. The concerns of cross-cutting are the ways that extent numerous roads of a particular application. In this context, it is interesting to note that the concerns of cross-cutting usually fluctuate from the business logic of a particular application. This is the reason that the separation of the concerns related to the cross-cutting nature is always a primary step that has to be taken in the application development process. AOP is also known as characteristic oriented programming that goes a long way in making sure that business logic is applied correctly to enterprise based applications.  
Q19) Define the process with the help of which you can deploy exception handling in the realm of Microservices
It is important to note that Microservices and spring usually provides a unique manner in which you can control the Controller Advice. You can say that you have the experience of deploying a class of Controller Advice with the help of the exceptions that are being used by the class of controllers.
Q20) Describe the advantages of Microservices nowadays
There are various advantages of using Microservices. They are as follows:
•	The tiny base of code is quite easy to maintain
•	It is quite easy to scale as it has only an individual component
•	It also supports the phenomenon of independent implementation
•	It drastically reduces the installation time
•	It renders good support for the parallel and the support teams
•	Another main advantage of this Microservices is in the form of the fact that it has the ability to facilitate technological diversity
Q21) Shed light on the various types of IT characteristics that are available in Microservices
With the help of Microservices, your business can scale new heights as it integrates IT planning and execution of projects. Here is the list of important IT characteristics those are available in Microservices.
•	Planning of various types of IT projects
•	Management of facilities
•	Implementation of several types of Agile Practices
•	The allocation of shared services
•	Management of the business cases
•	Maintaining transparency is various aspects of cost along with the planning of IT management
Q22)  What are the uses of reports and dashboards in the environment of Microservices?
It is vital for you to note that Microservices comprises of a plethora of publishing features. This includes a variety of charts, PDFs, and dashboards. With the help of dashboards and reports in Microservices, you can easily analyze scenarios and facilitate various types of executive packs.


Source 4: https://www.dineshonjava.com/spring-boot-microservices-interview-questions-answers/


April 13, 2017
 3 COMMENTS
Microservices Interview Questions Answers
Previous
Next
In this article, I have collected top 10 spring boot microservices interview questions and their answers frequently asked by interviewers. If you want to learn more about microservice architecture with spring boot, you could follow my previous article create microservices application using spring boot.
Be a 24*7 productive developer 24*7 productive by remotely accessing your essential programming tools such as emulators and IDE`s on preferred device(PC/android/iOS) using high performance citrix xendesktop at an affordable xendesktop pricing from CloudDesktopOnline. If you`re looking for a reliable & collaborative cloud platform then try out MS Azure with managed azure services from Apps4Rent.
 
Microservices Interview Questions
1.	What is Spring Boot?
2.	What is a microservices architecture?
3.	What are the advantages and disadvantages of microservices?
4.	What is Spring Cloud?
5.	Spring Cloud annotations and configuration?
6.	What Netflix projects did we use?
7.	How do you setup Service Discovery?
8.	How do you access a RESTful microservice?
9.	What is Eureka?
1. What is Spring Boot?
Spring Boot is a way to ease to create stand-alone application with minimal or zero configurations. It is approach to develop spring based application with very less configuration. It provides defaults for code and annotation configuration to quick start new spring projects within no time. It leverages existing spring projects as well as Third party projects to develop production ready applications. It provides a set of Starter Pom’s or gradle build files which one can use to add required dependencies and also facilitate auto configuration.
Spring Boot automatically configures required classes depending on the libraries on its classpath. Suppose your application want to interact with DB, if there are Spring Data libraries on class path then it automatically sets up connection to DB along with the Data Source class. For more detail about Spring Boot.
2. What is a microservices architecture?
Microservices architecture allows to avoid monolith application for large system. It provide loose coupling between collaborating processes which running independently in different environments with tight cohesion. For more detail.
3. What are the advantages and disadvantages of microservices?
Microservices Advantages
	Smaller code base is easy to maintain.
	Easy to scale as individual component.
	Technology diversity i.e. we can mix libraries, databases, frameworks etc.
	Fault isolation i.e. a process failure should not bring whole system down.
	Better support for smaller and parallel team.
	Independent deployment
	Deployment time reduce
Microservices Disadvantages
	Difficult to achieve strong consistency across services
	ACID transactions do not span multiple processes.
	Distributed System so hard to debug and trace the issues
	Greater need for end to end testing
	Required cultural changes in across teams like Dev and Ops working together even in same team.
Popular Tutorials
	Spring Tutorial
	Spring MVC Web Tutorial
	Spring Boot Tutorial
	Spring Security Tutorial
	Spring AOP Tutorial
	Spring JDBC Tutorial
	Spring HATEOAS
	Microservices with Spring Boot
	REST Webservice
	Core Java
	Hibernate Tutorial
	Spring Batch
4. What is Spring Cloud?
	It is building blocks for Cloud and Microservices
	It provides microservices infrastructure like provide use services such as Service Discovery, Configuration server and Monitoring.
	It provides several other open source projects like Netflix OSS.
	It provides PaaS like Cloud Foundry, AWS and Heroku.
	It uses Spring Boot style starters
	There are many use-cases supported by Spring Cloud like Cloud Integration, Dynamic Reconfiguration, Service Discovery, Security,Client side Load Balancing etc. But in this post we concentrate on following microservices support
	Service Discovery (How do services find each other?)
	Client-side Load Balancing (How do we decide which service instance to use?)
5. Spring Cloud annotations and configuration?
	@EnableEurekaServer annotation allows us to register microservices to the spring cloud.
	@EnableDiscoveryClient annotation also allows us to query Discovery server to find miroservices.
	Spring provide smart RestTemplate for service discovery and load balancing by using @LoadBalanced annotation with RestTemplate instance.
6. What Netflix projects did we use?
Eureka created by Netflix, it is the Netflix Service Discovery Server and Client. Netflix Ribbon, it provide several algorithm for Client-Side Load Balancing. Spring provide smart RestTemplate for service discovery and load balancing by using @LoadBalanced annotation with RestTemplate instance.
7. How do you setup Service Discovery?
Spring Cloud support several ways to implement service discovery but for this I am going to use Eureka created by Netflix. Spring Cloud provide several annotation to make it use easy and hiding lots of complexity. For more detail click here.
@@@8. How do you access a RESTful microservice?
	Load Balanced RestTemplate
	If there are multiple RestTemplate you get the right one.
	It can used to access multiple microservices
9. What is Eureka?
Eureka is the Netflix Service Discovery Server and Client. Eureka Server is using Spring Cloud.
Registering with Eureka
When a client registers with Eureka, it provides meta-data about itself such as host and port, health indicator URL, home page etc. Eureka receives heartbeat messages from each instance belonging to a service. If the heartbeat fails over a configurable timetable, the instance is normally removed from the registry.
Example eureka client:
@Configuration
@ComponentScan
@EnableAutoConfiguration
@EnableEurekaClient
@RestController
public class Application {

    @RequestMapping("/")
    public String home() {
        return "Hello world";
    }

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}

Source 5: https://www.javainuse.com/spring/microservices-interview-quesions



Microservices Interview Questions

In this post we will look at Spring Boot Microservices questions. Examples are provided with explanation. 

Q: What is Spring Boot?
A: Over the years spring has become more and more complex as new functionalities have been added. Just visit the page-https://spring.io/projects and we will see all the spring projects we can use in our application for different functionalities. If one has to start a new spring project we have to add build path or add maven dependencies, configure application server, add spring configuration . So a lot of effort is required to start a new spring project as we have to currently do everything from scratch. Spring Boot is the solution to this problem. Spring boot has been built on top of existing spring framework. Using spring boot we avoid all the boilerplate code and configurations that we had to do previously. Spring boot thus helps us use the existing Spring functionalities more robustly and with minimum efforts.
More details and miscellaneous examples 
Spring Boot InterviewQ: What are Microservices ?
A: Microservices is a variant of the service-oriented architecture (SOA) architectural style that structures an application as a collection of loosely coupled services. In a microservices architecture, services should be fine-grained and the protocols should be lightweight. The benefit of decomposing an application into different smaller services is that it improves modularity and makes the application easier to understand, develop and test. It also parallelizes development by enabling small autonomous teams to develop, deploy and scale their respective services independently. It also allows the architecture of an individual service to emerge through continuous refactoring. Microservices-based architectures enable continuous delivery and deployment.

Q: What is Spring Cloud ?
A: Spring Cloud Stream App Starters are Spring Boot based Spring Integration applications that provide integration with external systems. Spring Cloud Task. A short-lived microservices framework to quickly build applications that perform finite amounts of data processing.
Spring Cloud 

@@@Q: What are the advantages of using Spring Cloud ?
A: When developing distributed microservices with Spring Boot we face the following issues-
•	Complexity associated with distributed systems-
This overhead includes network issues, Latency overhead, Bandwidth issues, security issues.
•	Service Discovery-
Service discovery tools manage how processes and services in a cluster can find and talk to one another. It involves a directory of services, registering services in that directory, and then being able to lookup and connect to services in that directory.
•	Redundancy-
Redundancy issues in distributed systems.
•	Loadbalancing-
Load balancing improves the distribution of workloads across multiple computing resources, such as computers, a computer cluster, network links, central processing units, or disk drives.
•	Performance issues-
Performance issues due to various operational overheads.
•	Deployment complexities-
Requirement of Devops skills.
Q: How will you monitor multiple microservices for various indicators like health?
A: Spring Boot provides actuator endpoints to monitor metrics of individual microservices. These endpoints are very helpful for getting information about applications like if they are up, if their components like database etc are working good. But a major drawback or difficulty about using actuator enpoints is that we have to individually hit the enpoints for applications to know their status or health. Imagine microservices involving 50 applications, the admin will have to hit the actuator endpoints of all 50 applications. To help us deal with this situation, we will be using open source project located at https://github.com/codecentric/spring-boot-admin. 
Built on top of Spring Boot Actuator, it provides a web UI to enable us visualize the metrics of multiple applications.
Spring Boot Admin Example

Q: What does one mean by Service Registration and Discovery ? How is it implemented in Spring Cloud
A: When we start a project, we usally have all the configurations in the properties file. As more and more services are developed and deployed, adding and modifying these properties become more complex. Some services might go down, while some the location might change. This manual changing of properties may create issues.
Eureka Service Registration and Discovery helps in such scenarios. As all services are registered to the Eureka server and lookup done by calling the Eureka Server, any change in service locations need not be handled and is taken care of
Microservice Registration and Discovery with Spring cloud using Netflix Eureka. 

@@@Q: What does one mean by Load Balancing ? How is it implemented in Spring Cloud
A: In computing, load balancing improves the distribution of workloads across multiple computing resources, such as computers, a computer cluster, network links, central processing units, or disk drives. Load balancing aims to optimize resource use, maximize throughput, minimize response time, and avoid overload of any single resource. Using multiple components with load balancing instead of a single component may increase reliability and availability through redundancy. Load balancing usually involves dedicated software or hardware, such as a multilayer switch or a Domain Name System server process.
In SpringCloud this can be implemented using Netflix Ribbon.
Spring Cloud- Netflix Eureka + Ribbon Simple Example 

Q: How to achieve server side load balancing using Spring Cloud?
A: Server side load balancingcan be achieved using Netflix Zuul. 
Zuul is a JVM based router and server side load balancer by Netflix. 
It provides a single entry to our system, which allows a browser, mobile app, or other user interface to consume services from multiple hosts without managing cross-origin resource sharing (CORS) and authentication for each one. We can integrate Zuul with other Netflix projects like Hystrix for fault tolerance and Eureka for service discovery, or use it to manage routing rules, filters, and load balancing across your system.
Spring Cloud- Netflix Zuul Example 

Q: In which business scenario to use Netflix Hystrix ?
A: Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable.
Usually for systems developed using Microservices architecture, there are many microservices involved. These microservices collaborate with each other.
Consider the following microservices- 
 
Suppose if the microservice 9 in the above diagram failed, then using the traditional approach we will propagate an exception. But this will still cause the whole system to crash anyways.
This problem gets more complex as the number of microservices increase. The number of microservices can be as high as 1000. This is where hystrix comes into picture-
We will be using two features of Hystrix-
•	Fallback method
•	Circuit Breaker
Spring Cloud- Netflix Eureka + Ribbon + Hystrix Simple Example 

@@@Q: What is Spring Cloud Bus? Need for it?
A: Consider the scenario that we have multiple applications reading the properties using the Spring Cloud Config and the Spring Cloud Config in turn reads these properties from GIT.
Consider the below example where multiple employee producer modules are getting the property for Eureka Registration from Employee Config Module.
What will happen if suppose the eureka registration property in GIT changes to point to another Eureka server. In such a scenario we will have to restart the services to get the updated properties. There is another way of using Actuator Endpoint /refresh. But we will have to individually call this url for each of the modules. For example if Employee Producer1 is deployed on port 8080 then call http://localhost:8080/refresh. Similarly for Employee Producer2 http://localhost:8081/refresh and so on. This is again cumbersome. This is where Spring Cloud Bus comes into picture.
The Spring Cloud Bus provides feature to refresh configurations across multiple instances. So in above example if we refresh for Employee Producer1, then it will automatically refresh for all other required modules. This is particularly useful if we are having multiple microservice up and running. This is achieved by connecting all microservices to a single message broker. Whenever an instance is refreshed, this event is subscribed to all the microservices listening to this broker and they also get refreshed. The refresh to any single instance can be made by using the endpoint /bus/refresh
Spring Cloud Tutorial - Publish Events Using Spring Cloud Bus 

@@@Q: What is Spring Cloud Data Flow? Need for it?
A: Spring Cloud Data Flow is a toolkit to build real-time data integration and data processing pipelines by establishing message flows between Spring Boot applications that could be deployed on top of different runtimes.
Long lived applications require Stream Applications while Short lived applications require Task Applications.
In this example we make use of Stream Applications. Previously we had already developed Spring Cloud Stream applications to understand the concept of Spring Cloud Stream Source and Spring Cloud Sink and their benefit.
Pipelines consist of Spring Boot apps, built using the Spring Cloud Stream or Spring Cloud Task microservice frameworks. SCDF can be accessed using the REST API exposed by it or the web UI console.
We can make use of metrics, health checks, and the remote management of each microservice application Also we can scale stream and batch pipelines without interrupting data flows. With SCDF we build data pipelines for use cases like data ingestion, real-time analytics, and data import and export. SCDF is composed of the following Spring Projects-

Spring Cloud Tutorial - Stream Processing Using Spring Cloud Data Flow 

Q:What is Docker? How to deploy Spring Boot Microservices to Docker?
A: What is Docker
Deploying Spring Based WAR Application to Docker
Deploying Spring Based JAR Application to DockerQ: How to deploy multiple microservices to docker?
A: Deploying Multiple Spring Boot Microservices using Docker Networking

Q: What is Pivotal Cloud Foundry(PCF)?
A: Some time back all the IT infrastructure was on premises. There we in house servers managed by an IT resource personnel or a service provider.
Then with advent of cloud services these software and hardware services are now delivered over the internet rather than being on premises. 
 
Cloud Foundry is an open source, multi-cloud application platform as a service governed by the Cloud Foundry Foundation. The software was originally developed by VMware and then transferred to Pivotal Software, a joint venture by EMC, VMware and General Electric.
It is a service (PaaS) on which developers can build, deploy, run and scale applications. 
Many Organizations provide the cloud foundry platform separately. For example following are some cloud foundry providers-
•	Pivotal Cloud Foundry
•	IBM Bluemix
•	HPE Helion Stackato 4.0
•	Atos Canopy
•	CenturyLink App Fog
•	Huawei FusionStage
•	SAP Cloud Platform
•	Swisscom Application Cloud

Q: How to deploy Spring Boot Application to PCF?
A: Deploying Spring Boot Application to PCF 

Q: How to deploy Spring Boot + MySQL Application to PCF?
A: Pivotal Cloud Foundry Tutorial - Deploying Spring Boot + MySQL Application to PCF 

Q: How to deploy Spring Boot + RabbitMQ Application to PCF?
A: Pivotal Cloud Foundry Tutorial - Deploying Spring Boot + RabbitMQ Application to PCF 

Source 6: https://dzone.com/articles/top-29-microservices-interview-questions-for-2019

1. What Is Spring Cloud?
 Spring Cloud, in microservices, is a system that provides integration with external systems. It is a short-lived framework that builds an application, fast. Being associated with the finite amount of data processing, it plays a very important role in microservice architectures.
For typical use cases, Spring Cloud provides the out of the box experiences and a sets of extensive features mentioned below:
•	Versioned and distributed configuration.
•	Discovery of service registration.
•	Service to service calls.
•	Routing.
•	Circuit breakers and load balancing.
•	Cluster state and leadership election.
•	Global locks and distributed messaging.
2. What Is Spring Boot?
Spring boot is a major topic under the umbrella of microservices interview questions.
With the new functionalities that have been added, Spring keeps getting more complex. Whenever you are starting a new project, it is mandatory to add a new build path or Maven dependencies. In short, you will need to do everything from scratch. Spring Boot is the solution that will help you to avoid all the code configurations. 
3. How Do You Override a Spring Boot Project’s Default Properties?
This can be done by specifying the properties in the application.properties file.
For example, in Spring MVC applications, you have to specify the suffix and prefix. This can be done by entering the properties mentioned below in the application.properties file.
•	For suffix – spring.mvc.view.suffix: .jsp
•	For prefix – spring.mvc.view.prefix: /WEB-INF/
4. Role of Actuator in Spring Boot
It is one of the most important features, which helps you to access the current state of an application that is running in a production environment. There are multiple metrics which can be used to check the current state. They also provide endpoints for RESTful web services which can be simply used to check the different metrics.
5. How Is Spring Security Implemented In a Spring Boot Application?
Minimal configuration is needed for implementation. All you need to do is add thespring-boot-starter-securitystarter in the pom.xml file. You will also need to create a Spring config class that will override the required method while extending the WebSecurityConfigurerAdapter to achieve security in the application. Here is some example code:
package com.gkatzioura.security.securityendpoints.config; 
import org.springframework.context.annotation.Configuration; 
import org.springframework.security.config.annotation.web.builders.HttpSecurity; 
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; 
@Configuration 
public class SecurityConfig extends WebSecurityConfigurerAdapter {     
	@Override     
	protected void configure(HttpSecurity http) throws Exception {         
		http.authorizeRequests()             
		.antMatchers("/welcome").permitAll()             
		.anyRequest().authenticated()             
		.and()             
		.formLogin()             
		.permitAll()             
		.and()             
		.logout()             
		.permitAll();     
	} 
}
6. Which Embedded Containers Are Supported by Spring Boot?
Whenever you are creating a Java application, deployment can be done via two methods:
•	Using an application container that is external.
•	Embedding the container inside your jar file.
Spring Boot contains Jetty, Tomcat, and Undertow servers, all of which are embedded.
•	Jetty – Used in a wide number of projects, Eclipse Jetty can be embedded in framework, application servers, tools, and clusters.
•	Tomcat – Apache Tomcat is an open source JavaServer Pages implementation which works well with embedded systems.
•	Undertow – A flexible and prominent web server that uses small single handlers to develop a web server.
7. What Do You Mean by End-To-End Testing of Microservices?
End-to-end testing validates all the processes in the workflow to check if everything is working as expected. It also ensures that the system works in a unified manner, thereby satisfying the business requirement.
8. What Is Semantic Monitoring?
It combines monitoring of the entire application along with automated tests. The primary benefit of Semantic Monitoring is to find out the factors which are more profitable to your business.
Semantic monitoring along with service layer monitoring approaches monitoring of microservices from a business point of view. Once an issue is detected, they allow faster isolation and bug triaging, thereby reducing the main time required to repair. It triages the service layer and transaction layer to figure out the transactions affected by availability or poor performance.
9. How Can You Set Up Service Discovery?
There are multiple ways to set up service discovery. I’ll choose the one that I think to be most efficient, Eureka by Netflix. It is a hassle free procedure that does not weigh much on the application. Plus, it supports numerous types of web applications.
Eureka configuration involves two steps – client configuration and server configuration.
Client configuration can be done easily by using the property files. In the clas spath, Eureka searches for a eureka-client.properties file. It also searches for overrides caused by the environment in property files which are environment specific.
For server configuration, you have to configure the client first. Once that is done, the server fires up a client which is used to find other servers. The Eureka server, by default, uses the Client configuration to find the peer server.
10. Why Would You Opt for Microservices Architecture?
This is a very common microservices interview question which you should be ready for! There are plenty of pros that are offered by a microservices architecture. Here are a few of them:
•	Microservices can adapt easily to other frameworks or technologies.
•	Failure of a single process does not affect the entire system.
•	Provides support to big enterprises as well as small teams.
•	Can be deployed independently and in relatively less time.
11. Why Would You Need Reports and Dashboards in Microservices?
Reports and dashboards are mainly used to monitor and upkeep microservices. There are multiple tools that help to serve this purpose. Reports and dashboards can be used to:
•	Find out which microservices expose what resources.
•	Find out the services which are impacted whenever changes in a component occur.
•	Provide an easy point which can be accessed whenever documentation is required.
•	Versions of the components which are deployed.
•	To obtain a sense of maturity and compliance from the components.
12. Why Do People Hesitate to Use Microservices?
I have seen many devs fumble over this question. After all, they're getting asked this question when interviewing for a microservices architect role, so acknowledging its cons can be a little tricky. Here are some good answers:
•	They require heavy investment – Microservices demand a great deal of collaboration. Since your teams are working independently, they should be able to synchronize well at all times.
•	They need heavy architecture set up – The system is distributed, the architecture is heavily involved.
•	They need excessive planning for handling operations overhead – You need to be ready for operations overhead if you are planning to use a microservices architecture.
•	They have autonomous staff selection – Skilled professionals are needed who can support microservices that are distributed heterogeneously.
13. How Does PACT Work?
PACT is an open source tool. It helps in testing the interactions between consumers and service providers. However, it is not included in the contract, increasing the reliability of the application. The consumer service developer starts by writing a test which defines a mode of interaction with the service provider. The test includes the provider’s state, the request body, and the response that is expected. Based on this, PACT creates a stub against which the test is executed. The output is stored in a JSON file.
14. Define Domain Driven Design
The main focus is on the core domain logic. Complex designs are detected based on the domain’s model. This involves regular collaboration with domain experts to resolve issues related to the domain and improve the model of the application. While answering this microservices interview question, you will also need to mention the core fundamentals of DDD. They are:
•	DDD focuses mostly on domain logic and the domain itself.
•	Complex designs are completely based on the domain’s model.
•	To improve the design of the model and fix any emerging issues, DDD constantly works in collaboration with domain experts.
 

